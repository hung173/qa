import nu.studer.gradle.jooq.JooqEdition
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.flywaydb.flyway" version "10.1.0"
	id 'nu.studer.jooq' version '8.2'
}

group = 'org.hung'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

apply from: "gradle/flyway-dev.gradle"
apply from: "gradle/jooq.gradle"

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "com.zaxxer:HikariCP"
	implementation "org.postgresql:postgresql:${postgreSqlVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.security:spring-security-messaging'
	implementation "jakarta.annotation:jakarta.annotation-api"
	implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
	annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
	implementation "org.hibernate.orm:hibernate-core"
	implementation "org.hibernate.validator:hibernate-validator"
	implementation "org.apache.commons:commons-lang3"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.1'

	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	jooqGenerator 'org.postgresql:postgresql:42.5.1'

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"


}

tasks.named('test') {
	useJUnitPlatform()
}

jooq {
	version = '3.18.2'  // default (can be omitted)
	edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)

	configurations {
		main {  // name of the jOOQ configuration
			generateSchemaSourceOnCompilation = true  // default (can be omitted)

			generationTool {
//				logging = Logging.WARN
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/demo'
					user = 'postgres'
					password = 'hung'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
						forcedTypes {
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'JSONB?'
							}
							forcedType {
								name = 'varchar'
								includeExpression = '.*'
								includeTypes = 'INET'
							}
						}
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'org.hung.demo'
						directory = 'build/generated-src/jooq/main'  // default (can be omitted)
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}